diff -Napur linux-linux4microchip-2024.04-old/drivers/net/dsa/microchip/ksz8795.c linux-linux4microchip-2024.04-new/drivers/net/dsa/microchip/ksz8795.c
--- linux-linux4microchip-2024.04-old/drivers/net/dsa/microchip/ksz8795.c	2024-09-23 14:39:41.609199552 -0700
+++ linux-linux4microchip-2024.04-new/drivers/net/dsa/microchip/ksz8795.c	2024-09-24 13:53:48.187975136 -0700
@@ -1397,6 +1397,18 @@ int ksz8_enable_stp_addr(struct ksz_devi
 	return ksz8_w_sta_mac_table(dev, 0, &alu);
 }
 
+#define KSZ8_REGS_SIZE		0x100
+
+static struct bin_attribute ksz8_registers_attr = {
+	.attr = {
+		.name	= "registers",
+		.mode	= 00600,
+	},
+	.size	= KSZ8_REGS_SIZE,
+	.read	= ksz_registers_read,
+	.write	= ksz_registers_write,
+};
+
 int ksz8_setup(struct dsa_switch *ds)
 {
 	struct ksz_device *dev = ds->priv;
@@ -1441,6 +1453,10 @@ int ksz8_setup(struct dsa_switch *ds)
 	for (i = 0; i < (dev->info->num_vlans / 4); i++)
 		ksz8_r_vlan_entries(dev, i);
 
+	dev->regs_size = KSZ8_REGS_SIZE;
+	i = sysfs_create_bin_file(&dev->dev->kobj, &ksz8_registers_attr);
+	(void)i;
+
 	return ksz8_handle_global_errata(ds);
 }
 
@@ -1478,6 +1494,7 @@ int ksz8_switch_init(struct ksz_device *
 
 void ksz8_switch_exit(struct ksz_device *dev)
 {
+	sysfs_remove_bin_file(&dev->dev->kobj, &ksz8_registers_attr);
 	ksz8_reset_switch(dev);
 }
 
diff -Napur linux-linux4microchip-2024.04-old/drivers/net/dsa/microchip/ksz9477.c linux-linux4microchip-2024.04-new/drivers/net/dsa/microchip/ksz9477.c
--- linux-linux4microchip-2024.04-old/drivers/net/dsa/microchip/ksz9477.c	2024-09-24 14:06:28.015208847 -0700
+++ linux-linux4microchip-2024.04-new/drivers/net/dsa/microchip/ksz9477.c	2024-09-24 13:53:08.459426928 -0700
@@ -1540,6 +1540,18 @@ int ksz9477_enable_stp_addr(struct ksz_d
 	return 0;
 }
 
+#define KSZ9477_REGS_SIZE		0x8000
+
+static struct bin_attribute ksz9477_registers_attr = {
+	.attr = {
+		.name	= "registers",
+		.mode	= 00600,
+	},
+	.size	= KSZ9477_REGS_SIZE,
+	.read	= ksz_registers_read,
+	.write	= ksz_registers_write,
+};
+
 int ksz9477_setup(struct dsa_switch *ds)
 {
 	struct ksz_device *dev = ds->priv;
@@ -1586,6 +1598,11 @@ int ksz9477_setup(struct dsa_switch *ds)
 		}
 	}
 
+	dev->regs_size = KSZ9477_REGS_SIZE;
+	ret = sysfs_create_bin_file(&dev->dev->kobj,
+				    &ksz9477_registers_attr);
+	(void)ret;
+
 	return 0;
 }
 
@@ -1612,6 +1629,7 @@ void ksz9477_switch_exit(struct ksz_devi
 {
 	if (delayed_work_pending(&dev->sgmii_check))
 		cancel_delayed_work_sync(&dev->sgmii_check);
+	sysfs_remove_bin_file(&dev->dev->kobj, &ksz9477_registers_attr);
 	ksz9477_reset_switch(dev);
 }
 
diff -Napur linux-linux4microchip-2024.04-old/drivers/net/dsa/microchip/ksz_common.c linux-linux4microchip-2024.04-new/drivers/net/dsa/microchip/ksz_common.c
--- linux-linux4microchip-2024.04-old/drivers/net/dsa/microchip/ksz_common.c	2024-09-24 14:06:28.016208811 -0700
+++ linux-linux4microchip-2024.04-new/drivers/net/dsa/microchip/ksz_common.c	2024-09-24 13:31:42.124433257 -0700
@@ -3741,6 +3741,62 @@ static const struct dsa_switch_ops ksz_s
 	.set_mac_eee		= ksz_set_mac_eee,
 };
 
+ssize_t ksz_registers_read(struct file *filp, struct kobject *kobj,
+			   struct bin_attribute *bin_attr, char *buf,
+			   loff_t off, size_t count)
+{
+	struct ksz_device *swdev;
+	struct device *dev;
+	size_t i;
+	u32 reg;
+
+	dev = container_of(kobj, struct device, kobj);
+	swdev = dev_get_drvdata(dev);
+
+	if (unlikely(off >= swdev->regs_size))
+		return 0;
+
+	if ((off + count) >= swdev->regs_size)
+		count = swdev->regs_size - off;
+
+	if (unlikely(!count))
+		return count;
+
+	reg = off;
+	i = regmap_bulk_read(swdev->regmap[0], reg, buf, count);
+	i = count;
+	return i;
+}
+EXPORT_SYMBOL_GPL(ksz_registers_read);
+
+ssize_t ksz_registers_write(struct file *filp, struct kobject *kobj,
+			    struct bin_attribute *bin_attr, char *buf,
+			    loff_t off, size_t count)
+{
+	struct ksz_device *swdev;
+	struct device *dev;
+	size_t i;
+	u32 reg;
+
+	dev = container_of(kobj, struct device, kobj);
+	swdev = dev_get_drvdata(dev);
+
+	if (unlikely(off >= swdev->regs_size))
+		return -EFBIG;
+
+	if ((off + count) >= swdev->regs_size)
+		count = swdev->regs_size - off;
+
+	if (unlikely(!count))
+		return count;
+
+	reg = off;
+	i = regmap_bulk_write(swdev->regmap[0], reg, buf, count);
+	i = count;
+	return i;
+}
+EXPORT_SYMBOL_GPL(ksz_registers_write);
+
 struct ksz_device *ksz_switch_alloc(struct device *base, void *priv)
 {
 	struct dsa_switch *ds;
diff -Napur linux-linux4microchip-2024.04-old/drivers/net/dsa/microchip/ksz_common.h linux-linux4microchip-2024.04-new/drivers/net/dsa/microchip/ksz_common.h
--- linux-linux4microchip-2024.04-old/drivers/net/dsa/microchip/ksz_common.h	2024-09-24 14:06:28.016208811 -0700
+++ linux-linux4microchip-2024.04-new/drivers/net/dsa/microchip/ksz_common.h	2024-09-24 13:30:40.178696929 -0700
@@ -159,6 +159,7 @@ struct ksz_device {
 
 	struct device *dev;
 	struct regmap *regmap[__KSZ_NUM_REGMAPS];
+	u32 regs_size;
 
 	void *priv;
 	int irq;
@@ -412,6 +413,13 @@ bool ksz_get_gbit(struct ksz_device *dev
 phy_interface_t ksz_get_xmii(struct ksz_device *dev, int port, bool gbit);
 extern const struct ksz_chip_data ksz_switch_chips[];
 
+ssize_t ksz_registers_read(struct file *filp, struct kobject *kobj,
+			   struct bin_attribute *bin_attr, char *buf,
+			   loff_t off, size_t count);
+ssize_t ksz_registers_write(struct file *filp, struct kobject *kobj,
+			    struct bin_attribute *bin_attr, char *buf,
+			    loff_t off, size_t count);
+
 /* Common register access functions */
 static inline struct regmap *ksz_regmap_8(struct ksz_device *dev)
 {
