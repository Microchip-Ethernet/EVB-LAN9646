diff -Napur linux-linux4microchip-2024.04-old/drivers/net/dsa/microchip/ksz9477.c linux-linux4microchip-2024.04-new/drivers/net/dsa/microchip/ksz9477.c
--- linux-linux4microchip-2024.04-old/drivers/net/dsa/microchip/ksz9477.c	2024-09-17 16:39:25.227517935 -0700
+++ linux-linux4microchip-2024.04-new/drivers/net/dsa/microchip/ksz9477.c	2024-09-17 16:38:33.118607728 -0700
@@ -169,9 +169,7 @@ int ksz9477_reset_switch(struct ksz_devi
 	/* reset switch */
 	ksz_cfg(dev, REG_SW_OPERATION, SW_RESET, true);
 
-	/* turn off SPI DO Edge select */
-	regmap_update_bits(ksz_regmap_8(dev), REG_SW_GLOBAL_SERIAL_CTRL_0,
-			   SPI_AUTO_EDGE_DETECTION, 0);
+	ksz9477_detect_init(dev);
 
 	/* default configuration */
 	ksz_write8(dev, REG_SW_LUE_CTRL_1,
@@ -1141,21 +1139,8 @@ int ksz9477_tc_cbs_set_cinc(struct ksz_d
 
 int ksz9477_switch_init(struct ksz_device *dev)
 {
-	u8 data8;
-	int ret;
-
 	dev->port_mask = (1 << dev->info->port_cnt) - 1;
 
-	/* turn off SPI DO Edge select */
-	ret = ksz_read8(dev, REG_SW_GLOBAL_SERIAL_CTRL_0, &data8);
-	if (ret)
-		return ret;
-
-	data8 &= ~SPI_AUTO_EDGE_DETECTION;
-	ret = ksz_write8(dev, REG_SW_GLOBAL_SERIAL_CTRL_0, data8);
-	if (ret)
-		return ret;
-
 	return 0;
 }
 
@@ -1164,6 +1149,20 @@ void ksz9477_switch_exit(struct ksz_devi
 	ksz9477_reset_switch(dev);
 }
 
+void ksz9477_detect_init(struct ksz_device *dev)
+{
+	/* KSZ9897 family chip can fail to read registers correctly when the
+	 * SPI frequency is too high.  A solution is to disable SPI Auto Edge
+	 * Detection after chip reset.  This operation should not be done by
+	 * reading the register first and turning off the bit as the read may
+	 * be incorrect already so the value written may not be appropriate.
+	 * Currently other bits in this register are not crucial in normal
+	 * operation.
+	 */
+	if (ksz_is_9897_family(dev))
+		ksz_write8(dev, REG_SW_GLOBAL_SERIAL_CTRL_0, 0x40);
+}
+
 MODULE_AUTHOR("Woojung Huh <Woojung.Huh@microchip.com>");
 MODULE_DESCRIPTION("Microchip KSZ9477 Series Switch DSA Driver");
 MODULE_LICENSE("GPL");
diff -Napur linux-linux4microchip-2024.04-old/drivers/net/dsa/microchip/ksz9477.h linux-linux4microchip-2024.04-new/drivers/net/dsa/microchip/ksz9477.h
--- linux-linux4microchip-2024.04-old/drivers/net/dsa/microchip/ksz9477.h	2024-05-24 05:04:06.000000000 -0700
+++ linux-linux4microchip-2024.04-new/drivers/net/dsa/microchip/ksz9477.h	2024-09-17 16:38:33.118607728 -0700
@@ -56,5 +56,6 @@ int ksz9477_reset_switch(struct ksz_devi
 int ksz9477_switch_init(struct ksz_device *dev);
 void ksz9477_switch_exit(struct ksz_device *dev);
 void ksz9477_port_queue_split(struct ksz_device *dev, int port);
+void ksz9477_detect_init(struct ksz_device *dev);
 
 #endif
diff -Napur linux-linux4microchip-2024.04-old/drivers/net/dsa/microchip/ksz_common.c linux-linux4microchip-2024.04-new/drivers/net/dsa/microchip/ksz_common.c
--- linux-linux4microchip-2024.04-old/drivers/net/dsa/microchip/ksz_common.c	2024-09-17 16:39:54.429346815 -0700
+++ linux-linux4microchip-2024.04-new/drivers/net/dsa/microchip/ksz_common.c	2024-09-17 16:38:33.118607728 -0700
@@ -3158,6 +3158,9 @@ static int ksz_switch_detect(struct ksz_
 	u32 id32;
 	int ret;
 
+	/* Need to disable Auto Edge Detection before reading in KSZ9897. */
+	ksz9477_detect_init(dev);
+
 	/* read chip id */
 	ret = ksz_read16(dev, REG_CHIP_ID0, &id16);
 	if (ret)
diff -Napur linux-linux4microchip-2024.04-old/drivers/net/dsa/microchip/ksz_common.h linux-linux4microchip-2024.04-new/drivers/net/dsa/microchip/ksz_common.h
--- linux-linux4microchip-2024.04-old/drivers/net/dsa/microchip/ksz_common.h	2024-09-17 16:39:48.360590199 -0700
+++ linux-linux4microchip-2024.04-new/drivers/net/dsa/microchip/ksz_common.h	2024-09-17 16:38:33.119607688 -0700
@@ -636,6 +636,15 @@ static inline bool is_ksz88xx(struct ksz
 	return ksz_is_ksz88x3(dev) || ksz_is_8895_family(dev);
 }
 
+static inline bool ksz_is_9897_family(struct ksz_device *dev)
+{
+	return dev->chip_id == KSZ9477_CHIP_ID ||
+	       dev->chip_id == KSZ9897_CHIP_ID ||
+	       dev->chip_id == KSZ9896_CHIP_ID ||
+	       dev->chip_id == KSZ9567_CHIP_ID ||
+	       dev->chip_id == KSZ8567_CHIP_ID;
+}
+
 static inline int is_lan937x(struct ksz_device *dev)
 {
 	return dev->chip_id == LAN9370_CHIP_ID ||
diff -Napur linux-linux4microchip-2024.04-old/drivers/net/dsa/microchip/ksz_spi.c linux-linux4microchip-2024.04-new/drivers/net/dsa/microchip/ksz_spi.c
--- linux-linux4microchip-2024.04-old/drivers/net/dsa/microchip/ksz_spi.c	2024-09-17 16:39:48.360590199 -0700
+++ linux-linux4microchip-2024.04-new/drivers/net/dsa/microchip/ksz_spi.c	2024-09-17 16:38:33.119607688 -0700
@@ -54,6 +54,8 @@ static int ksz_spi_probe(struct spi_devi
 	if (!chip)
 		return -EINVAL;
 
+	/* Save chip id to do special initialization when probing. */
+	dev->chip_id = chip->chip_id;
 	if (chip->chip_id == KSZ8830_CHIP_ID)
 		regmap_config = ksz8863_regmap_config;
 	else if (chip->chip_id == KSZ8795_CHIP_ID ||
