diff -Napur u-boot-mchp-linux4microchip-2023.10-orig/arch/arm/dts/at91-sam9x75_curiosity_dev.dts u-boot-mchp-linux4microchip-2023.10/arch/arm/dts/at91-sam9x75_curiosity_dev.dts
--- u-boot-mchp-linux4microchip-2023.10-orig/arch/arm/dts/at91-sam9x75_curiosity_dev.dts	1969-12-31 16:00:00.000000000 -0800
+++ u-boot-mchp-linux4microchip-2023.10/arch/arm/dts/at91-sam9x75_curiosity_dev.dts	2024-03-26 18:29:29.276178584 -0700
@@ -0,0 +1,509 @@
+// SPDX-License-Identifier: (GPL-2.0+ OR MIT)
+/*
+ * at91-sam9x75_curiosity.dts - Device Tree file for Microchip SAM9X75 Curiosity board
+ *
+ * Copyright (C) 2023 Microchip Technology Inc. and its subsidiaries
+ *
+ * Author: Manikandan Muralidharan <manikandan.m@microchip.com>
+ */
+/dts-v1/;
+#include "sam9x7.dtsi"
+#include <dt-bindings/input/input.h>
+
+/ {
+	model = "Microchip SAM9X75 Curiosity";
+	compatible = "microchip,sam9x75-curiosity", "microchip,sam9x7", "atmel,at91sam9";
+
+	aliases {
+		i2c0 = &i2c6;
+	};
+
+	chosen {
+		stdout-path = "serial0:115200n8";
+	};
+
+	gpio-keys {
+		compatible = "gpio-keys";
+		pinctrl-names = "default";
+		pinctrl-0 = <&pinctrl_key_gpio_default>;
+
+		button-user {
+			label = "USER";
+			gpios = <&pioC 9 GPIO_ACTIVE_LOW>;
+			linux,code = <KEY_PROG1>;
+			wakeup-source;
+		};
+	};
+
+	leds {
+		compatible = "gpio-leds";
+		pinctrl-names = "default";
+		pinctrl-0 = <&pinctrl_led_gpio_default>;
+
+		led-red {
+			label = "red";
+			gpios = <&pioC 19 GPIO_ACTIVE_HIGH>;
+		};
+
+		led-green {
+			label = "green";
+			gpios = <&pioC 21 GPIO_ACTIVE_HIGH>;
+		};
+
+		led-blue {
+			label = "blue";
+			gpios = <&pioC 20 GPIO_ACTIVE_HIGH>;
+			linux,default-trigger = "heartbeat";
+		};
+	};
+
+	memory {
+		device_type = "memory";
+		reg = <0x20000000 0x10000000>;
+	};
+};
+
+&dbgu {
+	pinctrl-names = "default";
+	pinctrl-0 = <&pinctrl_dbgu>;
+	status = "okay";
+};
+
+&dma0 {
+	status = "okay";
+};
+
+&ebi {
+	pinctrl-names = "default";
+	pinctrl-0 = <&pinctrl_ebi_addr_nand &pinctrl_ebi_data_0_7>;
+	status = "okay";
+
+	nand_controller: nand-controller {
+		pinctrl-names = "default";
+		pinctrl-0 = <&pinctrl_nand_oe_we &pinctrl_nand_cs &pinctrl_nand_rb>;
+		status = "okay";
+
+		nand@2 {
+			reg = <0x2 0x0 0x800000>;
+			rb-gpios = <&pioD 14 GPIO_ACTIVE_HIGH>;
+			cs-gpios = <&pioD 4 GPIO_ACTIVE_HIGH>;
+			nand-bus-width = <8>;
+			nand-ecc-mode = "hw";
+			nand-ecc-strength = <8>;
+			nand-ecc-step-size = <512>;
+			nand-on-flash-bbt;
+			label = "atmel_nand";
+		};
+	};
+};
+
+&ehci0 {
+	status = "okay";
+};
+
+&flx6 {
+	atmel,flexcom-mode = <ATMEL_FLEXCOM_MODE_TWI>;
+	status = "okay";
+};
+
+&i2c6 {
+	#address-cells = <1>;
+	#size-cells = <0>;
+	pinctrl-names = "default";
+	pinctrl-0 = <&pinctrl_flx6_default>;
+	i2c-analog-filter;
+	i2c-digital-filter;
+	i2c-digital-filter-width-ns = <35>;
+	status = "okay";
+
+	pmic@5b {
+		compatible = "microchip,mcp16502";
+		reg = <0x5b>;
+
+		regulators {
+			vdd_3v3: VDD-IO {
+				regulator-name = "VDD_IO";
+				regulator-min-microvolt = <3000000>;
+				regulator-max-microvolt = <3600000>;
+				regulator-initial-mode = <2>;
+				regulator-allowed-modes = <2>, <4>;
+				regulator-always-on;
+
+				regulator-state-standby {
+					regulator-on-in-suspend;
+					regulator-mode = <4>;
+				};
+
+				regulator-state-mem {
+					regulator-mode = <4>;
+				};
+			};
+
+			vddioddr: VDD-DDR {
+				regulator-name = "VDD_DDR";
+				regulator-min-microvolt = <1283000>;
+				regulator-max-microvolt = <1450000>;
+				regulator-initial-mode = <2>;
+				regulator-allowed-modes = <2>, <4>;
+				regulator-always-on;
+
+				regulator-state-standby {
+					regulator-on-in-suspend;
+					regulator-mode = <4>;
+				};
+
+				regulator-state-mem {
+					regulator-on-in-suspend;
+					regulator-mode = <4>;
+				};
+			};
+
+			vddcore: VDD-CORE {
+				regulator-name = "VDD_CORE";
+				regulator-min-microvolt = <500000>;
+				regulator-max-microvolt = <1210000>;
+				regulator-initial-mode = <2>;
+				regulator-allowed-modes = <2>, <4>;
+				regulator-always-on;
+
+				regulator-state-standby {
+					regulator-on-in-suspend;
+					regulator-mode = <4>;
+				};
+
+				regulator-state-mem {
+					regulator-mode = <4>;
+				};
+			};
+
+			vddcpu: VDD-OTHER {
+				regulator-name = "VDD_OTHER";
+				regulator-min-microvolt = <1700000>;
+				regulator-max-microvolt = <3600000>;
+				regulator-initial-mode = <2>;
+				regulator-allowed-modes = <2>, <4>;
+				regulator-ramp-delay = <3125>;
+				regulator-always-on;
+
+				regulator-state-standby {
+					regulator-on-in-suspend;
+					regulator-mode = <4>;
+				};
+
+				regulator-state-mem {
+					regulator-mode = <4>;
+				};
+			};
+
+			vldo1: LDO1 {
+				regulator-name = "LDO1";
+				regulator-min-microvolt = <1200000>;
+				regulator-max-microvolt = <3700000>;
+				regulator-always-on;
+
+				regulator-state-standby {
+					regulator-on-in-suspend;
+				};
+			};
+
+			vldo2: LDO2 {
+				regulator-name = "LDO2";
+				regulator-min-microvolt = <1200000>;
+				regulator-max-microvolt = <3700000>;
+
+				regulator-state-standby {
+					regulator-on-in-suspend;
+				};
+			};
+		};
+	};
+
+	eeprom@53 {
+		compatible = "atmel,24c01";
+		reg = <0x53>;
+		pagesize = <8>;
+		status = "okay";
+	};
+};
+
+&main_xtal {
+	clock-frequency = <24000000>;
+};
+
+&ohci0 {
+	num-ports = <3>;
+	atmel,vbus-gpio = <0
+			   &pioC 27 GPIO_ACTIVE_HIGH
+			   &pioB 18 GPIO_ACTIVE_HIGH>;
+	pinctrl-names = "default";
+	pinctrl-0 = <&pinctrl_usb_default>;
+	status = "okay";
+};
+
+&pinctrl {
+
+	dbgu {
+		pinctrl_dbgu: dbgu-0 {
+			atmel,pins = <AT91_PIOA 26 AT91_PERIPH_A AT91_PINCTRL_PULL_UP
+				      AT91_PIOA 27 AT91_PERIPH_A AT91_PINCTRL_NONE>;
+		};
+	};
+
+	ebi {
+		pinctrl_ebi_data_0_7: ebi-data-lsb-0 {
+			atmel,pins =
+				<AT91_PIOD 6 AT91_PERIPH_A (AT91_PINCTRL_NONE | AT91_PINCTRL_SLEWRATE_DIS)
+				 AT91_PIOD 7 AT91_PERIPH_A (AT91_PINCTRL_NONE | AT91_PINCTRL_SLEWRATE_DIS)
+				 AT91_PIOD 8 AT91_PERIPH_A (AT91_PINCTRL_NONE | AT91_PINCTRL_SLEWRATE_DIS)
+				 AT91_PIOD 9 AT91_PERIPH_A (AT91_PINCTRL_NONE | AT91_PINCTRL_SLEWRATE_DIS)
+				 AT91_PIOD 10 AT91_PERIPH_A (AT91_PINCTRL_NONE | AT91_PINCTRL_SLEWRATE_DIS)
+				 AT91_PIOD 11 AT91_PERIPH_A (AT91_PINCTRL_NONE | AT91_PINCTRL_SLEWRATE_DIS)
+				 AT91_PIOD 12 AT91_PERIPH_A (AT91_PINCTRL_NONE | AT91_PINCTRL_SLEWRATE_DIS)
+				 AT91_PIOD 13 AT91_PERIPH_A (AT91_PINCTRL_NONE | AT91_PINCTRL_SLEWRATE_DIS)>;
+		};
+
+		pinctrl_ebi_addr_nand: ebi-addr-0 {
+			atmel,pins =
+				<AT91_PIOD 2 AT91_PERIPH_A (AT91_PINCTRL_NONE | AT91_PINCTRL_SLEWRATE_DIS)
+				 AT91_PIOD 3 AT91_PERIPH_A (AT91_PINCTRL_NONE | AT91_PINCTRL_SLEWRATE_DIS)>;
+		};
+
+	};
+
+	flexcom {
+		pinctrl_flx6_default: flx6-twi {
+			atmel,pins =
+				<AT91_PIOA 24 AT91_PERIPH_A AT91_PINCTRL_PULL_UP
+				 AT91_PIOA 25 AT91_PERIPH_A AT91_PINCTRL_PULL_UP>;
+		};
+	};
+
+	gpio-keys {
+		pinctrl_key_gpio_default: key-gpio-default {
+			atmel,pins = <AT91_PIOC 9 AT91_PERIPH_GPIO AT91_PINCTRL_NONE>;
+		};
+	};
+
+	leds {
+		pinctrl_led_gpio_default: led-gpio-default {
+			atmel,pins = <AT91_PIOC 19 AT91_PERIPH_GPIO AT91_PINCTRL_NONE
+				      AT91_PIOC 21 AT91_PERIPH_GPIO AT91_PINCTRL_NONE
+				      AT91_PIOC 20 AT91_PERIPH_GPIO AT91_PINCTRL_NONE>;
+		};
+	};
+
+	nand {
+		pinctrl_nand_oe_we: nand-oe-we-0 {
+			atmel,pins =
+				<AT91_PIOD 0 AT91_PERIPH_A (AT91_PINCTRL_NONE | AT91_PINCTRL_SLEWRATE_DIS)
+				 AT91_PIOD 1 AT91_PERIPH_A (AT91_PINCTRL_NONE | AT91_PINCTRL_SLEWRATE_DIS)>;
+		};
+
+		pinctrl_nand_rb: nand-rb-0 {
+			atmel,pins =
+				<AT91_PIOD 14 AT91_PERIPH_GPIO AT91_PINCTRL_PULL_UP>;
+		};
+
+		pinctrl_nand_cs: nand-cs-0 {
+			atmel,pins =
+				<AT91_PIOD 4 AT91_PERIPH_GPIO AT91_PINCTRL_PULL_UP>;
+		};
+	};
+
+	ohci0 {
+		pinctrl_usb_default: usb-default {
+			atmel,pins = <AT91_PIOC 27 AT91_PERIPH_GPIO AT91_PINCTRL_NONE
+				      AT91_PIOB 18 AT91_PERIPH_GPIO AT91_PINCTRL_NONE>;
+		};
+	};
+
+	sdmmc0 {
+		pinctrl_sdmmc0_default: sdmmc0 {
+			atmel,pins =
+				<AT91_PIOA 2 AT91_PERIPH_A (AT91_PINCTRL_DRIVE_STRENGTH_HI | AT91_PINCTRL_SLEWRATE_DIS)					/* PA2 CK  periph A with pullup */
+				 AT91_PIOA 1 AT91_PERIPH_A (AT91_PINCTRL_PULL_UP | AT91_PINCTRL_DRIVE_STRENGTH_HI | AT91_PINCTRL_SLEWRATE_DIS)		/* PA1 CMD periph A with pullup */
+				 AT91_PIOA 0 AT91_PERIPH_A (AT91_PINCTRL_PULL_UP | AT91_PINCTRL_DRIVE_STRENGTH_HI | AT91_PINCTRL_SLEWRATE_DIS)		/* PA0 DAT0 periph A */
+				 AT91_PIOA 3 AT91_PERIPH_A (AT91_PINCTRL_PULL_UP | AT91_PINCTRL_DRIVE_STRENGTH_HI | AT91_PINCTRL_SLEWRATE_DIS)		/* PA3 DAT1 periph A with pullup */
+				 AT91_PIOA 4 AT91_PERIPH_A (AT91_PINCTRL_PULL_UP | AT91_PINCTRL_DRIVE_STRENGTH_HI | AT91_PINCTRL_SLEWRATE_DIS)		/* PA4 DAT2 periph A with pullup */
+				 AT91_PIOA 5 AT91_PERIPH_A (AT91_PINCTRL_PULL_UP | AT91_PINCTRL_DRIVE_STRENGTH_HI | AT91_PINCTRL_SLEWRATE_DIS)>;		/* PA5 DAT3 periph A with pullup */
+		};
+	};
+
+	usb0 {
+		pinctrl_usba_vbus: usba-vbus {
+			atmel,pins = <AT91_PIOC 8 AT91_PERIPH_GPIO AT91_PINCTRL_NONE>;
+		};
+	};
+
+	flexcom {
+		pinctrl_flx7_twi_default: flx7-twi-default {
+			atmel,pins =
+				<AT91_PIOC 0 AT91_PERIPH_C AT91_PINCTRL_NONE
+				 AT91_PIOC 1 AT91_PERIPH_C AT91_PINCTRL_NONE>;
+		};
+
+		pinctrl_flx6_twi_default: flx6-twi-default {
+			atmel,pins =
+				<AT91_PIOA 24 AT91_PERIPH_A AT91_PINCTRL_NONE
+				 AT91_PIOA 25 AT91_PERIPH_A AT91_PINCTRL_NONE>;
+		};
+
+		pinctrl_flx3_default: flx3_spi {
+			atmel,pins =
+				<AT91_PIOC 22 AT91_PERIPH_B AT91_PINCTRL_NONE
+				 AT91_PIOC 23 AT91_PERIPH_B AT91_PINCTRL_NONE
+				 AT91_PIOC 25 AT91_PERIPH_B AT91_PINCTRL_NONE
+				 AT91_PIOC 26 AT91_PERIPH_B AT91_PINCTRL_NONE>;
+		};
+	};
+
+}; /* pinctrl */
+
+&rtt {
+	atmel,rtt-rtc-time-reg = <&gpbr 0x0>;
+};
+
+&sdmmc0 {
+	bus-width = <4>;
+	pinctrl-names = "default";
+	pinctrl-0 = <&pinctrl_sdmmc0_default>;
+	cd-gpios = <&pioA 23 GPIO_ACTIVE_LOW>;
+	disable-wp;
+	status = "okay";
+};
+
+&slow_xtal {
+	clock-frequency = <32768>;
+};
+
+&shutdown_controller {
+	atmel,shdwc-debouncer = <976>;
+	status = "okay";
+
+	input@0 {
+		reg = <0>;
+	};
+};
+
+&trng {
+	status = "okay";
+};
+
+&usb0 {
+	atmel,vbus-gpio = <&pioC 8 GPIO_ACTIVE_HIGH>;
+	pinctrl-names = "default";
+	pinctrl-0 = <&pinctrl_usba_vbus>;
+	status = "okay";
+};
+
+&watchdog {
+	status = "okay";
+};
+
+&flx3 {
+	atmel,flexcom-mode = <ATMEL_FLEXCOM_MODE_SPI>;
+	status = "okay";
+
+	spi3: spi@400 {
+		dmas = <0>, <0>;
+		pinctrl-names = "default";
+		pinctrl-0 = <&pinctrl_flx3_default>;
+		status = "okay";
+	};
+};
+
+&gmac {
+	phy-mode = "rgmii-id";
+	pinctrl-names = "default";
+	pinctrl-0 = <&pinctrl_gmac_rgmii_default>;
+	magic-packet;
+	status = "okay";
+
+	fixed-link {
+		speed = <1000>;
+		full-duplex;
+	};
+};
+
+&spi3 {
+	#address-cells = <1>;
+	#size-cells = <0>;
+	pinctrl-names = "default";
+	pinctrl-0 = <&pinctrl_flx3_default>;
+//	cs-gpios = <&pioC 25 0>, <&pioA 21 0>;
+//	cs-gpios = <0>, <&pioA 21 0>;
+	dmas = <0>, <0>;
+	atmel,fifo-size = <32>;
+	status = "okay";
+
+	ksz9563: ksz9563@0 {
+		compatible = "microchip,ksz9563";
+		reg = <0>;
+	//	interrupt-parent = <&pioD>;
+	//	interrupts = <5 IRQ_TYPE_LEVEL_LOW>;
+		spi-max-frequency = <1100000>;		/* flywire */
+//		spi-cs-setup-delay-ns = <100>;
+//		spi-cs-hold-delay-ns = <100>;
+//		spi-cs-inactive-delay-ns = <0>;
+
+		spi-cpha;
+		spi-cpol;
+		status = "okay";
+
+		ports {
+			#address-cells = <1>;
+			#size-cells = <0>;
+			port@0 {
+				reg = <0>;
+				label = "lan1";
+			};
+			port@1 {
+				reg = <1>;
+				label = "lan2";
+			};
+			port@2 {
+				reg = <2>;
+				phy-mode = "rgmii-id";
+				rx-internal-delay-ps = <2000>;
+				tx-internal-delay-ps = <2000>;
+				ethernet = <&gmac>;
+				fixed-link {
+					speed = <1000>;
+					full-duplex;
+				};
+			};
+		};
+	};
+};
+
+&pinctrl {
+	gmac-pins {
+		pinctrl_gmac_rgmii_default: gmac-rgmii-default {
+			atmel,pins =
+				<AT91_PIOB 13 AT91_PERIPH_A  AT91_PINCTRL_SLEWRATE_DIS				/* ETH_TX0   */
+				 AT91_PIOB 14 AT91_PERIPH_A  AT91_PINCTRL_SLEWRATE_DIS				/* ETH_TX1   */
+				 AT91_PIOB 4  AT91_PERIPH_A  AT91_PINCTRL_SLEWRATE_DIS				/* ETH_TX2   */
+				 AT91_PIOB 5  AT91_PERIPH_A  AT91_PINCTRL_SLEWRATE_DIS				/* ETH_TX3   */
+				 AT91_PIOB 7  AT91_PERIPH_A  AT91_PINCTRL_SLEWRATE_DIS				/* ETH_TXCTL  */
+				 AT91_PIOB 6  AT91_PERIPH_A (AT91_PINCTRL_PULL_UP | AT91_PINCTRL_SLEWRATE_DIS)	/* ETH_TXCK  */
+
+				 AT91_PIOB 11 AT91_PERIPH_A  AT91_PINCTRL_SLEWRATE_DIS				/* ETH_RX0   */
+				 AT91_PIOB 12 AT91_PERIPH_A  AT91_PINCTRL_SLEWRATE_DIS				/* ETH_RX1   */
+				 AT91_PIOB 0  AT91_PERIPH_A  AT91_PINCTRL_SLEWRATE_DIS				/* ETH_RX2   */
+				 AT91_PIOB 1  AT91_PERIPH_A  AT91_PINCTRL_SLEWRATE_DIS				/* ETH_RX3   */
+				 AT91_PIOB 8  AT91_PERIPH_A  AT91_PINCTRL_SLEWRATE_DIS				/* ETH_RXCK   */
+				 AT91_PIOB 3  AT91_PERIPH_A  AT91_PINCTRL_SLEWRATE_DIS				/* ETH_RXCTL */
+
+				 AT91_PIOB 10 AT91_PERIPH_A  AT91_PINCTRL_NONE					/* ETH_MDC   */
+				 AT91_PIOB 9  AT91_PERIPH_A  AT91_PINCTRL_NONE					/* ETH_MDIO  */
+
+				 AT91_PIOB 2  AT91_PERIPH_A  AT91_PINCTRL_DIS_SCHMIT			 	/* ETH_125CK */
+				 AT91_PIOD 5  AT91_PERIPH_GPIO  AT91_PINCTRL_NONE>;				/* ETH_INT   */
+		};
+	};
+};
+
+&{/} {
+	model = "SAM9X75-Curiosity: KSZ9563(SPI) RGMII PHY Daughter Card";
+};
+
diff -Napur u-boot-mchp-linux4microchip-2023.10-orig/arch/arm/dts/sam9x7.dtsi u-boot-mchp-linux4microchip-2023.10/arch/arm/dts/sam9x7.dtsi
--- u-boot-mchp-linux4microchip-2023.10-orig/arch/arm/dts/sam9x7.dtsi	2023-12-18 02:10:05.000000000 -0800
+++ u-boot-mchp-linux4microchip-2023.10/arch/arm/dts/sam9x7.dtsi	2024-03-12 13:29:34.515199553 -0700
@@ -1228,6 +1228,7 @@
 		aic: interrupt-controller@fffff100 {
 			compatible = "microchip,sam9x7-aic";
 			reg = <0xfffff100 0x100>;
+			#address-cells = <1>;
 			#interrupt-cells = <3>;
 			interrupt-controller;
 			atmel,external-irqs = <31>;
@@ -1272,6 +1273,7 @@
 				#gpio-cells = <2>;
 				gpio-controller;
 				interrupt-controller;
+				#address-cells = <1>;
 				#interrupt-cells = <2>;
 				clocks = <&pmc PMC_TYPE_PERIPHERAL 2>;
 			};
@@ -1284,6 +1286,7 @@
 				gpio-controller;
 				#gpio-lines = <26>;
 				interrupt-controller;
+				#address-cells = <1>;
 				#interrupt-cells = <2>;
 				clocks = <&pmc PMC_TYPE_PERIPHERAL 3>;
 			};
@@ -1295,6 +1298,7 @@
 				#gpio-cells = <2>;
 				gpio-controller;
 				interrupt-controller;
+				#address-cells = <1>;
 				#interrupt-cells = <2>;
 				clocks = <&pmc PMC_TYPE_PERIPHERAL 4>;
 			};
@@ -1307,6 +1311,7 @@
 				gpio-controller;
 				#gpio-lines = <22>;
 				interrupt-controller;
+				#address-cells = <1>;
 				#interrupt-cells = <2>;
 				clocks = <&pmc PMC_TYPE_PERIPHERAL 44>;
 			};
diff -Napur u-boot-mchp-linux4microchip-2023.10-orig/arch/arm/mach-at91/Kconfig u-boot-mchp-linux4microchip-2023.10/arch/arm/mach-at91/Kconfig
--- u-boot-mchp-linux4microchip-2023.10-orig/arch/arm/mach-at91/Kconfig	2023-12-18 02:10:05.000000000 -0800
+++ u-boot-mchp-linux4microchip-2023.10/arch/arm/mach-at91/Kconfig	2024-03-14 11:03:52.020063448 -0700
@@ -358,6 +358,14 @@ config ATMEL_LEGACY
 config AT91_WANTS_COMMON_PHY
 	bool
 
+config HAVE_KSZ9897
+	bool "KSZ9897 SPI support"
+	depends on (SAMA5D3 || SAM9X7)
+
+config HAVE_KSZ8851
+	bool "KSZ8851 SPI support"
+	depends on (SAMA5D3 || SAM9X7) && !HAVE_KSZ9897
+
 source "board/atmel/at91sam9260ek/Kconfig"
 source "board/atmel/at91sam9261ek/Kconfig"
 source "board/atmel/at91sam9263ek/Kconfig"
diff -Napur u-boot-mchp-linux4microchip-2023.10-orig/cmd/Kconfig u-boot-mchp-linux4microchip-2023.10/cmd/Kconfig
--- u-boot-mchp-linux4microchip-2023.10-orig/cmd/Kconfig	2023-12-18 02:10:05.000000000 -0800
+++ u-boot-mchp-linux4microchip-2023.10/cmd/Kconfig	2024-03-12 16:13:02.833274813 -0700
@@ -1481,6 +1481,12 @@ config CMD_SF_TEST
 	  equal the SPI bus speed for a single-bit-wide SPI bus, assuming
 	  everything is working properly.
 
+config CMD_SPI_KSZ
+	bool "kspi - Command to access spi device"
+	depends on SPI && (SAMA5D3 || SAM9X7)
+	help
+	  SPI utility command.
+
 config CMD_SPI
 	bool "sspi - Command to access spi device"
 	depends on SPI
diff -Napur u-boot-mchp-linux4microchip-2023.10-orig/cmd/Makefile u-boot-mchp-linux4microchip-2023.10/cmd/Makefile
--- u-boot-mchp-linux4microchip-2023.10-orig/cmd/Makefile	2023-12-18 02:10:05.000000000 -0800
+++ u-boot-mchp-linux4microchip-2023.10/cmd/Makefile	2024-03-12 16:10:01.580958394 -0700
@@ -162,6 +162,7 @@ obj-$(CONFIG_CMD_SEAMA) += seama.o
 obj-$(CONFIG_CMD_SETEXPR) += setexpr.o
 obj-$(CONFIG_CMD_SETEXPR_FMT) += printf.o
 obj-$(CONFIG_CMD_SPI) += spi.o
+obj-$(CONFIG_CMD_SPI_KSZ) += spi_ksz.o
 obj-$(CONFIG_CMD_STRINGS) += strings.o
 obj-$(CONFIG_CMD_SMC) += smccc.o
 obj-$(CONFIG_CMD_SYSBOOT) += sysboot.o
diff -Napur u-boot-mchp-linux4microchip-2023.10-orig/cmd/spi_ksz.c u-boot-mchp-linux4microchip-2023.10/cmd/spi_ksz.c
--- u-boot-mchp-linux4microchip-2023.10-orig/cmd/spi_ksz.c	1969-12-31 16:00:00.000000000 -0800
+++ u-boot-mchp-linux4microchip-2023.10/cmd/spi_ksz.c	2024-03-14 11:04:27.442196423 -0700
@@ -0,0 +1,440 @@
+// SPDX-License-Identifier: GPL-2.0+
+/*
+ * (C) Copyright 2002
+ * Gerald Van Baren, Custom IDEAS, vanbaren@cideas.com
+ */
+
+/*
+ * SPI Read/Write Utilities
+ */
+
+#include <common.h>
+#include <command.h>
+#include <dm.h>
+#include <errno.h>
+#include <spi.h>
+
+/*-----------------------------------------------------------------------
+ * Definitions
+ */
+
+#ifndef MAX_SPI_BYTES
+#   define MAX_SPI_BYTES 32	/* Maximum number of bytes we can handle */
+#endif
+
+#define MAX_SPI_DATA_BYTES	(MAX_SPI_BYTES - 4)
+
+/*
+ * Values from last command.
+ */
+static unsigned int	bus = CONFIG_DEFAULT_SPI_BUS;
+static unsigned int	cs;
+static unsigned int	mode = CONFIG_DEFAULT_SPI_MODE;
+static unsigned int	freq = 20000000;
+static int   		bitlen;
+static int		size;
+static uchar 		dout[MAX_SPI_BYTES];
+static uchar 		din[MAX_SPI_BYTES];
+
+#ifdef CONFIG_HAVE_KSZ9897
+
+/* SPI frame opcodes */
+#define KS_SPIOP_RD			3
+#define KS_SPIOP_WR			2
+
+#define SPI_ADDR_SHIFT			24
+#define SPI_ADDR_MASK			((1 << SPI_ADDR_SHIFT) - 1)
+#define SPI_TURNAROUND_SHIFT		5
+
+static int spi_cmd(uint addr, int len, int read)
+{
+	int j;
+	uint op = KS_SPIOP_WR;
+
+	if (read)
+		op = KS_SPIOP_RD;
+	addr &= SPI_ADDR_MASK;
+	addr |= op << SPI_ADDR_SHIFT;
+	addr <<= SPI_TURNAROUND_SHIFT;
+	for (j = 0; j < 4; j++) {
+		dout[3 - j] = (uchar) addr;
+		addr >>= 8;
+	}
+	return j;
+}
+
+static int spi_def_size(void)
+{
+	return 1;
+}
+
+static int spi_little(void)
+{
+	return 0;
+}
+
+static int spi_burst(void)
+{
+	return 1;
+}
+#endif
+
+#ifdef CONFIG_HAVE_KSZ8851
+
+/* SPI frame opcodes */
+#define KS_SPIOP_RD			(0x00)
+#define KS_SPIOP_WR			(0x40)
+#define KS_SPIOP_RXFIFO			(0x80)
+#define KS_SPIOP_TXFIFO			(0xC0)
+
+/* shift for byte-enable data */
+#define BYTE_EN(x)			((x) << 2)
+
+/* turn register number and byte-enable mask into data for start of packet */
+#define MK_OP(byteen, reg)  (BYTE_EN(byteen) | (reg) << (8 + 2) | (reg) >> 6)
+
+static int spi_cmd(uint addr, int len, int read)
+{
+	int bit;
+
+	switch (len) {
+	case 1:
+		bit = 1 << (addr & 3);
+		break;
+	case 4:
+		bit = 0xf;
+		break;
+	default:
+		bit = addr & 2 ? 0xc : 0x3;
+	}
+	addr = MK_OP(bit, addr);
+	if (!read)
+		addr |= KS_SPIOP_WR;
+	dout[0] = (uchar) addr;
+	addr >>= 8;
+	dout[1] = (uchar) addr;
+	return 2;
+}
+
+static int spi_def_size(void)
+{
+	return 2;
+}
+
+static int spi_little(void)
+{
+	return 1;
+}
+
+static int spi_burst(void)
+{
+	return 0;
+}
+#endif
+
+static int spi_data(char *param, uchar *val, int max, int cap, int size,
+	int num)
+{
+	char pad[8];
+	char hex[4];
+	int diff;
+	int i = 0;
+	int len = 0;
+	char *buf = param;
+
+	while (*buf++ && len < max) {
+		i++;
+		if (!(i & 1))
+			len++;
+	}
+	len = size * 2;
+	i %= len;
+	diff = (len - i) % len;
+	memset(pad, '0', 8);
+	pad[diff] = '\0';
+	hex[2] = '\0';
+	hex[1] = '\0';
+	i = 0;
+	len = 0;
+	buf = pad;
+	while (*buf) {
+		hex[i++] = *buf++;
+		if (2 == i) {
+			val[len++] = (uchar) simple_strtoul(hex, NULL, 16);
+			i = 0;
+		}
+	}
+	while (*param && len < max) {
+		hex[i++] = *param++;
+		if (2 == i) {
+			val[len++] = (uchar) simple_strtoul(hex, NULL, 16);
+			i = 0;
+		}
+	}
+	size *= num;
+	if (cap && len > size) {
+		diff = len - size;
+		len = size;
+		for (i = 0; i < len; i++)
+			val[i] = val[i + diff];
+	}
+	if (len < size) {
+		diff = size - len;
+		for (i = 0; i < len; i++)
+			val[i + diff] = val[i];
+		for (i = 0; i < diff; i++)
+			val[i] = 0;
+		len = size;
+	}
+	return len;
+}
+
+static int do_spi_xfer(int bus, int cs, int read, int start)
+{
+	struct spi_slave *slave;
+	int ret = 0;
+
+#ifdef CONFIG_DM_SPI
+	char name[30], *str;
+	struct udevice *dev;
+
+	snprintf(name, sizeof(name), "generic_%d:%d", bus, cs);
+	str = strdup(name);
+	if (!str)
+		return -ENOMEM;
+	ret = _spi_get_bus_and_cs(bus, cs, freq, mode, "spi_generic_drv",
+				  str, &dev, &slave);
+	if (ret)
+		return ret;
+#else
+	slave = spi_setup_slave(bus, cs, freq, mode);
+	if (!slave) {
+		printf("Invalid device %d:%d\n", bus, cs);
+		return -EINVAL;
+	}
+#endif
+
+	ret = spi_claim_bus(slave);
+	if (ret)
+		goto done;
+	ret = spi_xfer(slave, bitlen, dout, din,
+		       SPI_XFER_BEGIN | SPI_XFER_END);
+#ifndef CONFIG_DM_SPI
+	/* We don't get an error code in this case */
+	if (ret)
+		ret = -EIO;
+#endif
+	if (ret) {
+		printf("Error %d during SPI transaction\n", ret);
+	}
+	if (!ret && read) {
+		int j;
+		int len;
+		int tmp;
+		int newline = 0;
+
+		tmp = 0;
+		len = bitlen / 8;
+		for (j = start; j < len; j += size) {
+			++tmp;
+			if (2 == size) {
+				if (spi_little()) {
+					ushort *tmp = (ushort *) &din[j];
+
+					*tmp = htons(*tmp);
+				}
+				printf("%02X%02X", din[j], din[j + 1]);
+				if (8 == tmp)
+					newline = 1;
+			} else if (4 == size) {
+				if (spi_little()) {
+					uint *tmp = (uint *) &din[j];
+
+					*tmp = htonl(*tmp);
+				}
+				printf("%02X%02X%02X%02X",
+					din[j], din[j + 1],
+					din[j + 2], din[j + 3]);
+				if (8 == tmp)
+					newline = 1;
+			} else {
+				printf("%02X", din[j]);
+				if (16 == tmp)
+					newline = 1;
+			}
+			if (newline) {
+				printf("\n");
+				tmp = 0;
+				newline = 0;
+			} else
+				printf(" ");
+		}
+		if (tmp)
+			printf("\n");
+	}
+
+done:
+	spi_release_bus(slave);
+#ifndef CONFIG_DM_SPI
+	spi_free_slave(slave);
+#endif
+
+	return ret;
+}
+
+/*
+ * SPI read/write
+ *
+ * Syntax:
+ *   kr {addr} {num}
+ *   kw {addr} {val} {num}
+ *     {addr} is the hexadecimal address
+ *     {num} is the number of addresses to access
+ *     {val} is a hexadecimal string of data to send
+ * The command prints out the hexadecimal string received via SPI.
+ */
+
+int do_ksz_spi(struct cmd_tbl *cmdtp, int flag, int argc, char *const argv[])
+{
+	int   j;
+	int   len;
+	int   read = 0;
+	static int start = 0;
+
+	if ('r' == argv[0][1])
+		read = 1;
+
+	/*
+	 * We use the last specified parameters, unless new ones are
+	 * entered.
+	 */
+
+	if ((flag & CMD_FLAG_REPEAT) == 0)
+	{
+		uchar val[MAX_SPI_DATA_BYTES];
+		uint  addr;
+		int   cap = 0;
+		int   num = 1;
+		int   need = 3;
+
+		if (read)
+			need--;
+
+		if (argc < need)
+			return CMD_RET_USAGE;
+
+		/* Check for size specification.
+		*/
+		if ((size = cmd_get_data_size(argv[0], 1)) < 0)
+			return 1;
+		if ('.' != argv[0][2])
+			size = spi_def_size();
+		addr = simple_strtoul(argv[1], NULL, 16);
+
+		if (argc > need && spi_burst()) {
+			cap = simple_strtoul(argv[need], NULL, 16);
+			if (cap) {
+				len = cap * size;
+				if (len > MAX_SPI_DATA_BYTES)
+					cap = MAX_SPI_DATA_BYTES / size;
+				num = cap;
+			}
+		}
+		if (!read)
+			len = spi_data(argv[2], val, MAX_SPI_DATA_BYTES, cap,
+				size, num);
+		else {
+			len = num * size;
+			memset(val, 0, len);
+		}
+
+		start = spi_cmd(addr, size, read);
+		num = size;
+		for (j = 0; j < len; j++) {
+			dout[j + start] = val[j];
+			if (size > 1 && spi_little()) {
+				--num;
+				if (!num) {
+					if (2 == size) {
+						ushort *tmp = (ushort *)
+							&dout[(j & ~1) + start];
+
+						*tmp = htons(*tmp);
+					} else if (4 == size) {
+						uint *tmp = (uint *)
+							&dout[(j & ~3) + start];
+
+						*tmp = htonl(*tmp);
+					}
+					num = size;
+				}
+			}
+		}
+		len += start;
+		bitlen = len * 8;
+	}
+
+	if (do_spi_xfer(bus, cs, read, start))
+		return 1;
+
+	return 0;
+}
+
+/*
+ * SPI config
+ *
+ * Syntax:
+ *   spi {dev}
+ *     {dev} is the device number for controlling chip select (see TBD)
+ */
+
+int do_cfg_spi(struct cmd_tbl *cmdtp, int flag, int argc, char *const argv[])
+{
+	char  *cp = 0;
+
+	/*
+	 * We use the last specified parameters, unless new ones are
+	 * entered.
+	 */
+
+	if ((flag & CMD_FLAG_REPEAT) == 0)
+	{
+		if (argc >= 2) {
+			cs = dectoul(argv[1], &cp);
+			if (*cp == ':') {
+				bus = cs;
+				cs = dectoul(cp + 1, &cp);
+			}
+			if (*cp == '.')
+				mode = dectoul(cp + 1, &cp);
+			if (*cp == '@')
+				freq = dectoul(cp + 1, &cp);
+		}
+	}
+
+	return 0;
+}
+
+/***************************************************/
+
+U_BOOT_CMD(
+	kr,	3,	1,	do_ksz_spi,
+	"KSZ SPI read command",
+	"[.b, .w, .l] <addr> [num] - Read from KSZ switch register"
+);
+
+U_BOOT_CMD(
+	kw,	4,	1,	do_ksz_spi,
+	"KSZ SPI write command",
+	"[.b, .w, .l] <addr> <val> [num] - Write to KSZ switch register"
+);
+
+U_BOOT_CMD(
+	ks,	3,	1,	do_cfg_spi,
+	"SPI config command",
+	"[<bus>:]<cs>[.<mode>][@<freq>] - Configure bus, cs, and mode\n"
+	"<bus>     - Identifies the SPI bus\n"
+	"<cs>      - Identifies the chip select\n"
+	"<mode>    - Identifies the SPI mode to use\n"
+	"<freq>    - Identifies the SPI bus frequency in Hz"
+);
diff -Napur u-boot-mchp-linux4microchip-2023.10-orig/configs/sam9x75_curiosity_dev_defconfig u-boot-mchp-linux4microchip-2023.10/configs/sam9x75_curiosity_dev_defconfig
--- u-boot-mchp-linux4microchip-2023.10-orig/configs/sam9x75_curiosity_dev_defconfig	1969-12-31 16:00:00.000000000 -0800
+++ u-boot-mchp-linux4microchip-2023.10/configs/sam9x75_curiosity_dev_defconfig	2024-03-27 17:08:59.840868210 -0700
@@ -0,0 +1,108 @@
+CONFIG_ARM=y
+CONFIG_SKIP_LOWLEVEL_INIT=y
+CONFIG_ARCH_AT91=y
+CONFIG_TEXT_BASE=0x23f00000
+CONFIG_SYS_MALLOC_LEN=0x81000
+CONFIG_SYS_MALLOC_F_LEN=0x12000
+CONFIG_TARGET_SAM9X75_CURIOSITY=y
+CONFIG_ATMEL_LEGACY=y
+CONFIG_HAVE_KSZ9897=y
+CONFIG_NR_DRAM_BANKS=8
+CONFIG_HAS_CUSTOM_SYS_INIT_SP_ADDR=y
+CONFIG_CUSTOM_SYS_INIT_SP_ADDR=0x20015f00
+CONFIG_SF_DEFAULT_SPEED=50000000
+CONFIG_ENV_SIZE=0x40000
+CONFIG_ENV_OFFSET=0x100000
+CONFIG_DM_GPIO=y
+CONFIG_DEFAULT_DEVICE_TREE="at91-sam9x75_curiosity_dev"
+CONFIG_SYS_PROMPT="U-Boot> "
+CONFIG_OF_LIBFDT_OVERLAY=y
+CONFIG_DM_RESET=y
+CONFIG_DEBUG_UART_BASE=0xfffff200
+CONFIG_DEBUG_UART_CLOCK=266666666
+CONFIG_DEBUG_UART_BOARD_INIT=y
+CONFIG_SYS_LOAD_ADDR=0x22000000
+CONFIG_DEBUG_UART=y
+CONFIG_FIT=y
+CONFIG_SD_BOOT=y
+CONFIG_BOOTDELAY=3
+CONFIG_USE_BOOTARGS=y
+CONFIG_BOOTARGS="console=ttyS0,115200 rootfstype=ubifs ubi.mtd=10 root=ubi0:rootfs rw rootwait"
+CONFIG_USE_BOOTCOMMAND=y
+CONFIG_BOOTCOMMAND="nand read 0x21000000 0x180000 0x80000; nand read 0x22000000 0x200000 0x600000; bootz 0x22000000 - 0x21000000"
+CONFIG_SYS_CONSOLE_IS_IN_ENV=y
+# CONFIG_DISPLAY_BOARDINFO is not set
+CONFIG_HUSH_PARSER=y
+CONFIG_SYS_CBSIZE=256
+CONFIG_SYS_PBSIZE=381
+CONFIG_CMD_BOOTZ=y
+CONFIG_CMD_CLK=y
+CONFIG_CMD_DM=y
+# CONFIG_CMD_FLASH is not set
+CONFIG_CMD_GPIO=y
+CONFIG_CMD_I2C=y
+CONFIG_CMD_MMC=y
+CONFIG_CMD_NAND=y
+CONFIG_CMD_NAND_TORTURE=y
+CONFIG_CMD_SF_TEST=y
+CONFIG_CMD_SPI_KSZ=y
+CONFIG_CMD_SPI=y
+# CONFIG_CMD_SETEXPR is not set
+CONFIG_CMD_DHCP=y
+CONFIG_BOOTP_BOOTFILESIZE=y
+CONFIG_CMD_MII=y
+CONFIG_CMD_PING=y
+CONFIG_CMD_HASH=y
+CONFIG_HASH_VERIFY=y
+CONFIG_CMD_FAT=y
+CONFIG_CMD_FS_GENERIC=y
+CONFIG_CMD_MTDPARTS=y
+CONFIG_CMD_MTDPARTS_SPREAD=y
+CONFIG_CMD_MTDPARTS_SHOW_NET_SIZES=y
+CONFIG_MTDIDS_DEFAULT="nand0=nand0,nor0=nor0"
+CONFIG_MTDPARTS_DEFAULT="mtdparts=nand0:256k(bootstrap-nand)ro,1M(u-boot-nand)ro,256k(env-nand)ro,512k(dtb-nand)ro,6M(kernel-nand)ro,-(rootfs-nand)ro;nor0:256k(bootstrap-nor)ro,1M(u-boot-nor)ro,256k(env-nor)ro,512k(dtb-nor)ro,6M(kernel-nor)ro"
+CONFIG_OF_CONTROL=y
+CONFIG_ENV_IS_IN_NAND=y
+CONFIG_SYS_RELOC_GD_ENV_ADDR=y
+CONFIG_REGMAP=y
+CONFIG_SYSCON=y
+CONFIG_CLK=y
+CONFIG_CLK_CCF=y
+CONFIG_CLK_AT91=y
+CONFIG_AT91_GENERIC_CLK=y
+CONFIG_AT91_SAM9X60_PLL=y
+CONFIG_CPU=y
+CONFIG_AT91_GPIO=y
+CONFIG_DM_I2C=y
+CONFIG_SYS_I2C_AT91=y
+CONFIG_ATMEL_EBI=y
+CONFIG_MFD_ATMEL_SMC=y
+CONFIG_I2C_EEPROM=y
+CONFIG_MICROCHIP_FLEXCOM=y
+CONFIG_MMC_SDHCI=y
+CONFIG_MMC_SDHCI_ATMEL=y
+CONFIG_MTD=y
+CONFIG_DM_MTD=y
+CONFIG_MTD_RAW_NAND=y
+CONFIG_DM_NAND_ATMEL=y
+CONFIG_SYS_NAND_ONFI_DETECTION=y
+CONFIG_DM_SPI_FLASH=y
+CONFIG_SPI_FLASH_SFDP_SUPPORT=y
+CONFIG_SPI_FLASH_SST=y
+# CONFIG_SPI_FLASH_USE_4K_SECTORS is not set
+CONFIG_SPI_FLASH_MTD=y
+CONFIG_PHY_FIXED=y
+CONFIG_MACB=y
+CONFIG_PINCTRL=y
+CONFIG_PINCTRL_AT91=y
+CONFIG_RESET_AT91=y
+CONFIG_DM_SERIAL=y
+CONFIG_DEBUG_UART_ANNOUNCE=y
+CONFIG_ATMEL_USART=y
+CONFIG_SPI=y
+CONFIG_DM_SPI=y
+CONFIG_ATMEL_QSPI=y
+CONFIG_SYSRESET=y
+CONFIG_SYSRESET_AT91=y
+CONFIG_TIMER=y
+CONFIG_MCHP_PIT64B_TIMER=y
diff -Napur u-boot-mchp-linux4microchip-2023.10-orig/configs/sam9x75_curiosity_dev_mmc_defconfig u-boot-mchp-linux4microchip-2023.10/configs/sam9x75_curiosity_dev_mmc_defconfig
--- u-boot-mchp-linux4microchip-2023.10-orig/configs/sam9x75_curiosity_dev_mmc_defconfig	1969-12-31 16:00:00.000000000 -0800
+++ u-boot-mchp-linux4microchip-2023.10/configs/sam9x75_curiosity_dev_mmc_defconfig	2024-03-27 16:14:38.312238373 -0700
@@ -0,0 +1,96 @@
+CONFIG_ARM=y
+CONFIG_SKIP_LOWLEVEL_INIT=y
+CONFIG_ARCH_AT91=y
+CONFIG_TEXT_BASE=0x23f00000
+CONFIG_SYS_MALLOC_LEN=0x81000
+CONFIG_SYS_MALLOC_F_LEN=0x12000
+CONFIG_TARGET_SAM9X75_CURIOSITY=y
+CONFIG_ATMEL_LEGACY=y
+CONFIG_HAVE_KSZ9897=y
+CONFIG_NR_DRAM_BANKS=8
+CONFIG_HAS_CUSTOM_SYS_INIT_SP_ADDR=y
+CONFIG_CUSTOM_SYS_INIT_SP_ADDR=0x20015f00
+CONFIG_SF_DEFAULT_SPEED=50000000
+CONFIG_ENV_SIZE=0x4000
+CONFIG_DM_GPIO=y
+CONFIG_DEFAULT_DEVICE_TREE="at91-sam9x75_curiosity_dev"
+CONFIG_SYS_PROMPT="U-Boot> "
+CONFIG_OF_LIBFDT_OVERLAY=y
+CONFIG_DEBUG_UART_BASE=0xfffff200
+CONFIG_DEBUG_UART_CLOCK=266666666
+CONFIG_DEBUG_UART_BOARD_INIT=y
+CONFIG_SYS_LOAD_ADDR=0x22000000
+CONFIG_DEBUG_UART=y
+CONFIG_FIT=y
+CONFIG_SD_BOOT=y
+CONFIG_BOOTDELAY=3
+CONFIG_USE_BOOTARGS=y
+CONFIG_BOOTARGS="mem=256M console=ttyS0,115200 root=/dev/mmcblk0p2 rw rootfstype=ext4 rootwait"
+CONFIG_USE_BOOTCOMMAND=y
+CONFIG_BOOTCOMMAND="fatload mmc 0:1 0x21000000 at91-sam9x75_curiosity.dtb; fatload mmc 0:1 0x22000000 zImage; bootz 0x22000000 - 0x21000000"
+CONFIG_SYS_CONSOLE_IS_IN_ENV=y
+# CONFIG_DISPLAY_BOARDINFO is not set
+CONFIG_HUSH_PARSER=y
+CONFIG_SYS_CBSIZE=256
+CONFIG_SYS_PBSIZE=381
+CONFIG_CMD_BOOTZ=y
+CONFIG_CMD_CLK=y
+CONFIG_CMD_DM=y
+# CONFIG_CMD_FLASH is not set
+CONFIG_CMD_GPIO=y
+CONFIG_CMD_I2C=y
+CONFIG_CMD_MMC=y
+CONFIG_CMD_NAND=y
+CONFIG_CMD_SPI_KSZ=y
+CONFIG_CMD_SPI=y
+# CONFIG_CMD_SETEXPR is not set
+CONFIG_CMD_DHCP=y
+CONFIG_BOOTP_BOOTFILESIZE=y
+CONFIG_CMD_MII=y
+CONFIG_CMD_PING=y
+CONFIG_CMD_HASH=y
+CONFIG_HASH_VERIFY=y
+CONFIG_CMD_FAT=y
+CONFIG_OF_CONTROL=y
+CONFIG_ENV_IS_IN_FAT=y
+CONFIG_ENV_FAT_DEVICE_AND_PART="0:1"
+CONFIG_SYS_RELOC_GD_ENV_ADDR=y
+CONFIG_REGMAP=y
+CONFIG_SYSCON=y
+CONFIG_CLK=y
+CONFIG_CLK_CCF=y
+CONFIG_CLK_AT91=y
+CONFIG_AT91_GENERIC_CLK=y
+CONFIG_AT91_SAM9X60_PLL=y
+CONFIG_CPU=y
+CONFIG_AT91_GPIO=y
+CONFIG_DM_I2C=y
+CONFIG_SYS_I2C_AT91=y
+CONFIG_ATMEL_EBI=y
+CONFIG_MFD_ATMEL_SMC=y
+CONFIG_I2C_EEPROM=y
+CONFIG_MICROCHIP_FLEXCOM=y
+CONFIG_MMC_SDHCI=y
+CONFIG_MMC_SDHCI_ATMEL=y
+CONFIG_MTD=y
+CONFIG_DM_MTD=y
+CONFIG_MTD_RAW_NAND=y
+CONFIG_DM_NAND_ATMEL=y
+CONFIG_SYS_NAND_ONFI_DETECTION=y
+CONFIG_DM_SPI_FLASH=y
+CONFIG_SPI_FLASH_SFDP_SUPPORT=y
+CONFIG_SPI_FLASH_SST=y
+# CONFIG_SPI_FLASH_USE_4K_SECTORS is not set
+CONFIG_SPI_FLASH_MTD=y
+CONFIG_PHY_FIXED=y
+CONFIG_MACB=y
+CONFIG_PINCTRL=y
+CONFIG_PINCTRL_AT91=y
+CONFIG_DM_SERIAL=y
+CONFIG_DEBUG_UART_ANNOUNCE=y
+CONFIG_ATMEL_USART=y
+CONFIG_SPI=y
+CONFIG_DM_SPI=y
+CONFIG_ATMEL_QSPI=y
+CONFIG_TIMER=y
+CONFIG_MCHP_PIT64B_TIMER=y
diff -Napur u-boot-mchp-linux4microchip-2023.10-orig/drivers/net/macb.c u-boot-mchp-linux4microchip-2023.10/drivers/net/macb.c
--- u-boot-mchp-linux4microchip-2023.10-orig/drivers/net/macb.c	2023-12-18 02:10:05.000000000 -0800
+++ u-boot-mchp-linux4microchip-2023.10/drivers/net/macb.c	2024-03-19 11:49:48.578577133 -0700
@@ -516,6 +516,7 @@ static int _macb_recv(struct macb_device
 	}
 }
 
+#ifndef CONFIG_PHY_FIXED
 static void macb_phy_reset(struct macb_device *macb, const char *name)
 {
 	int i;
@@ -567,6 +568,7 @@ static int macb_phy_find(struct macb_dev
 
 	return -ENODEV;
 }
+#endif
 
 /**
  * macb_linkspd_cb - Linkspeed change callback function
@@ -660,12 +662,20 @@ static int macb_phy_init(struct udevice
 {
 	struct macb_device *macb = dev_get_priv(dev);
 	u32 ncfgr;
+#ifndef CONFIG_PHY_FIXED
 	u16 phy_id, status, adv, lpa;
 	int media, speed, duplex;
+#else
+	u16 lpa;
+	int speed, duplex;
+#endif
 	int ret;
+#ifndef CONFIG_PHY_FIXED
 	int i;
+#endif
 
 	arch_get_mdio_control(name);
+#ifndef CONFIG_PHY_FIXED
 	/* Auto-detect phy_addr */
 	ret = macb_phy_find(macb, name);
 	if (ret)
@@ -677,6 +687,7 @@ static int macb_phy_init(struct udevice
 		printf("%s: No PHY present\n", name);
 		return -ENODEV;
 	}
+#endif
 
 #ifdef CONFIG_PHYLIB
 	macb->phydev = phy_connect(macb->bus, macb->phy_addr, dev,
@@ -687,8 +698,12 @@ static int macb_phy_init(struct udevice
 	}
 
 	phy_config(macb->phydev);
+#ifdef CONFIG_PHY_FIXED
+	phy_startup(macb->phydev);
+#endif
 #endif
 
+#ifndef CONFIG_PHY_FIXED
 	status = macb_mdio_read(macb, macb->phy_addr, MII_BMSR);
 	if (!(status & BMSR_LSTATUS)) {
 		/* Try to re-negotiate if we don't have link already. */
@@ -713,23 +728,44 @@ static int macb_phy_init(struct udevice
 		       name, status);
 		return -ENETDOWN;
 	}
+#endif
 
 	/* First check for GMAC and that it is GiB capable */
 	if (gem_is_gigabit_capable(macb)) {
+#ifndef CONFIG_PHY_FIXED
 		lpa = macb_mdio_read(macb, macb->phy_addr, MII_STAT1000);
+#else
+		if (macb->phydev->speed == SPEED_1000)
+			lpa = 0x7800;
+		else
+			lpa = 0x0000;
+		speed = env_get_ulong("speed", 10, macb->phydev->speed);
+#endif
 
 		if (lpa & (LPA_1000FULL | LPA_1000HALF | LPA_1000XFULL |
 					LPA_1000XHALF)) {
 			duplex = ((lpa & (LPA_1000FULL | LPA_1000XFULL)) ?
 					1 : 0);
 
+#ifdef CONFIG_PHY_FIXED
+			printf("%s: link up, %sMbps %s-duplex (lpa: 0x%04x)\n",
+			       name,
+			       speed == SPEED_1000 ? "1000" : "100",
+#else
 			printf("%s: link up, 1000Mbps %s-duplex (lpa: 0x%04x)\n",
 			       name,
+#endif
 			       duplex ? "full" : "half",
 			       lpa);
 
 			ncfgr = macb_readl(macb, NCFGR);
 			ncfgr &= ~(MACB_BIT(SPD) | MACB_BIT(FD));
+#ifdef CONFIG_PHY_FIXED
+			ncfgr &= ~GEM_BIT(GBE);
+			if (speed == SPEED_100)
+				ncfgr |= MACB_BIT(SPD);
+			else
+#endif
 			ncfgr |= GEM_BIT(GBE);
 
 			if (duplex)
@@ -745,6 +781,7 @@ static int macb_phy_init(struct udevice
 		}
 	}
 
+#ifndef CONFIG_PHY_FIXED
 	/* fall back for EMAC checking */
 	adv = macb_mdio_read(macb, macb->phy_addr, MII_ADVERTISE);
 	lpa = macb_mdio_read(macb, macb->phy_addr, MII_LPA);
@@ -752,6 +789,11 @@ static int macb_phy_init(struct udevice
 	speed = (media & (ADVERTISE_100FULL | ADVERTISE_100HALF)
 		 ? 1 : 0);
 	duplex = (media & ADVERTISE_FULL) ? 1 : 0;
+#else
+	speed = macb->phydev->speed == SPEED_100;
+	duplex = macb->phydev->duplex;
+	lpa = 0x05e1;
+#endif
 	printf("%s: link up, %sMbps %s-duplex (lpa: 0x%04x)\n",
 	       name,
 	       speed ? "100" : "10",
diff -Napur u-boot-mchp-linux4microchip-2023.10-orig/drivers/spi/atmel_spi.c u-boot-mchp-linux4microchip-2023.10/drivers/spi/atmel_spi.c
--- u-boot-mchp-linux4microchip-2023.10-orig/drivers/spi/atmel_spi.c	2023-12-18 02:10:05.000000000 -0800
+++ u-boot-mchp-linux4microchip-2023.10/drivers/spi/atmel_spi.c	2024-03-27 16:14:06.957578203 -0700
@@ -118,6 +118,10 @@ struct atmel_spi_priv {
 #endif
 };
 
+#ifdef CONFIG_HAVE_KSZ9897
+static u32 last_freq;
+#endif
+
 static int atmel_spi_claim_bus(struct udevice *dev)
 {
 	struct udevice *bus = dev_get_parent(dev);
@@ -130,6 +134,12 @@ static int atmel_spi_claim_bus(struct ud
 	u32 scbr, csrx, mode;
 
 	scbr = (priv->bus_clk_rate + freq - 1) / freq;
+#ifdef CONFIG_HAVE_KSZ9897
+	if (last_freq != freq) {
+		last_freq = freq;
+		printf("%s %d %x\n", __func__, freq, scbr);
+	}
+#endif
 	if (scbr > ATMEL_SPI_CSRx_SCBR_MAX)
 		return -EINVAL;
 
@@ -336,6 +346,9 @@ static int atmel_spi_enable_clk(struct u
 		return -EINVAL;
 
 	priv->bus_clk_rate = clk_rate;
+#ifdef CONFIG_HAVE_KSZ9897
+	printf("rate: %ld\n", priv->bus_clk_rate);
+#endif
 
 	clk_free(&clk);
 
diff -Napur u-boot-mchp-linux4microchip-2023.10-orig/drivers/spi/spi-uclass.c u-boot-mchp-linux4microchip-2023.10/drivers/spi/spi-uclass.c
--- u-boot-mchp-linux4microchip-2023.10-orig/drivers/spi/spi-uclass.c	2023-12-18 02:10:05.000000000 -0800
+++ u-boot-mchp-linux4microchip-2023.10/drivers/spi/spi-uclass.c	2024-03-14 11:10:50.502445565 -0700
@@ -489,6 +489,11 @@ int _spi_get_bus_and_cs(int busnum, int
 			goto err;
 	}
 
+#ifdef CONFIG_HAVE_KSZ9897
+	ret = spi_set_speed_mode(bus, speed, mode);
+	if (ret)
+		goto err_speed_mode;
+#else
 	/* In case bus frequency or mode changed, update it. */
 	if ((speed && bus_data->speed && bus_data->speed != speed) ||
 	    (plat && plat->mode != mode)) {
@@ -496,6 +501,7 @@ int _spi_get_bus_and_cs(int busnum, int
 		if (ret)
 			goto err_speed_mode;
 	}
+#endif
 
 	*busp = bus;
 	*devp = slave;
